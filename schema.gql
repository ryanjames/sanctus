### Type definitions saved at 2022-12-22T01:11:47.885Z ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  resolutions(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResolutions @deprecated(reason: "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  sizes(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpSizes @deprecated(reason: "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen. 
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.  
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.  
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width, 
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed. 
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads. 
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image. 
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF". 
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying 
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image. 
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout 
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image. 
    This does not affect the generated images, but is used by the browser to decide which images to download. 
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpResolutions {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

type ImageSharpSizes {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

interface ContentfulEntry @nodeInterface {
  contentful_id: String!
  id: ID!
  node_locale: String!
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

type ContentfulAsset implements ContentfulReference & Node @derivedTypes @dontInfer {
  contentful_id: String!
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
  sys: ContentfulAssetSys
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type ContentfulAssetFile @derivedTypes {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails @derivedTypes {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulAssetSys {
  type: String
  revision: Int
}

type ContentfulCaseStudy implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  feature: Boolean
  slug: String
  overlayColor: String
  role: String
  body: ContentfulCaseStudyBody
  section1Body: ContentfulCaseStudySection1Body
  section2Body: ContentfulCaseStudySection2Body
  section3Body: ContentfulCaseStudySection3Body
  section4Body: ContentfulCaseStudySection4Body
  section5Body: ContentfulCaseStudySection5Body
  section6Body: ContentfulCaseStudySection6Body
  section7Body: ContentfulCaseStudySection7Body
  section8Body: ContentfulCaseStudySection8Body
  section9Body: ContentfulCaseStudySection9Body
  section10Body: ContentfulCaseStudySection10Body
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  relatedStudies: [ContentfulCaseStudy] @link(by: "id", from: "relatedStudies___NODE")
  section1Media: ContentfulAsset @link(by: "id", from: "section1Media___NODE")
  section3Media: ContentfulAsset @link(by: "id", from: "section3Media___NODE")
  section4Media: ContentfulAsset @link(by: "id", from: "section4Media___NODE")
  section5Media: ContentfulAsset @link(by: "id", from: "section5Media___NODE")
  section6Media: ContentfulAsset @link(by: "id", from: "section6Media___NODE")
  section7Media: ContentfulAsset @link(by: "id", from: "section7Media___NODE")
  section8Media: ContentfulAsset @link(by: "id", from: "section8Media___NODE")
  section9Media: ContentfulAsset @link(by: "id", from: "section9Media___NODE")
  section10Media: ContentfulAsset @link(by: "id", from: "section10Media___NODE")
  case_study_category: [ContentfulCaseStudyCategory] @link(by: "id", from: "case study category___NODE") @proxy(from: "case study category___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulCaseStudySys
  priority: String
  videoUrl: String
  client: String
  credit: String
  creditLabel: String
  case_study: [ContentfulCaseStudy] @link(by: "id", from: "case study___NODE") @proxy(from: "case study___NODE")
  credit2: String
  credit2Label: String
}

type ContentfulCaseStudyBody {
  raw: String
  references: [ContentfulAsset] @link(by: "id", from: "references___NODE")
}

type ContentfulCaseStudySection1Body {
  raw: String
  references: [ContentfulAsset] @link(by: "id", from: "references___NODE")
}

type ContentfulCaseStudySection2Body {
  raw: String
}

type ContentfulCaseStudySection3Body {
  raw: String
}

type ContentfulCaseStudySection4Body {
  raw: String
}

type ContentfulCaseStudySection5Body {
  raw: String
}

type ContentfulCaseStudySection6Body {
  raw: String
}

type ContentfulCaseStudySection7Body {
  raw: String
}

type ContentfulCaseStudySection8Body {
  raw: String
}

type ContentfulCaseStudySection9Body {
  raw: String
}

type ContentfulCaseStudySection10Body {
  raw: String
}

type ContentfulCaseStudyCategory implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  categoryName: String
  slug: String
  caseStudies: [ContentfulCaseStudy] @link(by: "id", from: "caseStudies___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulCaseStudyCategorySys
}

type ContentfulCaseStudyCategorySys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulCaseStudyCategorySysContentType
}

type ContentfulCaseStudyCategorySysContentType @derivedTypes {
  sys: ContentfulCaseStudyCategorySysContentTypeSys
}

type ContentfulCaseStudyCategorySysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulCaseStudySys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulCaseStudySysContentType
}

type ContentfulCaseStudySysContentType @derivedTypes {
  sys: ContentfulCaseStudySysContentTypeSys
}

type ContentfulCaseStudySysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulPageContent implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  page: String
  heading: String
  body: ContentfulPageContentBody
  seoDescription: String
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPageContentSys
}

type ContentfulPageContentBody {
  raw: String
}

type ContentfulPageContentSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPageContentSysContentType
}

type ContentfulPageContentSysContentType @derivedTypes {
  sys: ContentfulPageContentSysContentTypeSys
}

type ContentfulPageContentSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulSiteMetadata implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  siteSeoTitle: String
  siteSeoDescription: String
  musicLibrarySeoDescription: String
  licensingIntro: String
  downloadSampleIntro: String
  openGraphImage: ContentfulAsset @link(by: "id", from: "openGraphImage___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulSiteMetadataSys
}

type ContentfulSiteMetadataSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulSiteMetadataSysContentType
}

type ContentfulSiteMetadataSysContentType @derivedTypes {
  sys: ContentfulSiteMetadataSysContentTypeSys
}

type ContentfulSiteMetadataSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type Airtable implements Node @derivedTypes @dontInfer {
  table: String
  recordId: String
  data: AirtableData
}

type AirtableData {
  Track_Title: String
  Priority: String
  Playlists: [Airtable] @link(by: "id", from: "Playlists___NODE")
  Length: String
  Energy: [Airtable] @link(by: "id", from: "Energy___NODE")
  Moods: [Airtable] @link(by: "id", from: "Moods___NODE")
  Published: Boolean
  Dropbox_URL: String
  URL: String
  Exclusivity: String
  Playlist_Name: String
  Playlist_Tracks: [Airtable] @link(by: "id", from: "Playlist_Tracks___NODE")
  Playlist_Active: Boolean
  Energy_Name: String
  Energy_Tracks: [String]
  Mood_Name: String
  Tracks: [String]
  Count__Tracks_: Int @proxy(from: "Count_(Tracks)")
  Playlists__from_Tracks_: [String] @proxy(from: "Playlists_(from_Tracks)")
  Favorite: Boolean
  New_: Boolean @proxy(from: "New?")
  subtext_taxonomy_test: [String]
}

type ContentfulContentType implements Node @derivedTypes @dontInfer {
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeSys {
  type: String
}